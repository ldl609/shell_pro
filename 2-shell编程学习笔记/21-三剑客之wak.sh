#!/bin/bash 

:<<eof
					1.awk简介及概述
 -awk是一种适合文本处理和报表生成的语言
 -其语法较为常见,借鉴了某些语言的一些精华,如C语言等
eof

:<<eof
 						2.awk运算符概述
 --------------------------------------------------------------------------
                |			  		|					|
 ---------------|-------------------|-------------------|---------------------
 赋值运算符		| =, +=, -=, *=,	|					|awk 'BEGIN{a=5;a+=5;print a}'
				| /=, %=, ^=, **=	|					|
 ---------------|-------------------|-------------------|---------------------
 逻辑运算符		| ||,	&&			|					|awk 'BEGIN{a=1;b=2;print (a>2&&b>1,a=1||b>1)}'
 ---------------|-------------------|-------------------|---------------------
 正则运算符		| ~, !~				|					|awk 'BEGIN{a="100testaaa"}a~/100/{print "ok"}'
 ---------------|-------------------|-------------------|---------------------
 关系运算符		| <, <=, >, >=,		|					|awk 'BEGIN{a="11";if(a>=9){print "ok"}}
				| !=, ==			|					|
 ---------------|-------------------|-------------------|---------------------
				| +, -				| 加,减				|awk 'BEGIN{a=5;a=a+5;print a}'
				|-------------------|-------------------|---------------------
				| *, /, &			| 乘,除与求余		|awk 'BEGIN{a=5;a=a*5;print a}'
				|-------------------|-------------------|---------------------
   算术运算符	| +, -, !			| 一元加,减和逻辑非	|
				|-------------------|-------------------|---------------------
				| ^, ***			| 求幂				|
				|-------------------|-------------------|---------------------
				| ++, --			| 增加或减少			|awk 'BEGIN{a="b";print a++,++a}'
 ---------------|-------------------|-------------------|---------------------
				| $					| 字段引用			|
				|-------------------|-------------------|---------------------
				| 空格				| 字符串连接符		|
   其他运算符	|-------------------|-------------------|-----------------
				| ?=				| 三目运算符			|awk 'BEGIN{a="b";print a=="b"?"ok":"err"}'
				|-------------------|-------------------|---------------------
				| ln				| 数组中是否存在某键值|
 --------------------------------------------------------------------------
eof


:<<eof
例如:hello.txt中有两行
root:x:0:0:root:/root"/bin/bash \n         一行就是一个记录,\n就是记录分隔符,：就是字段分隔符,
bin:x:1:1:bin:/bin:/sbin/nologin \n

 							3.awk常用内置变量
 --------------------------------------------------------------------------
 	变量名					属性
 --------------------------------------------------------------------------
 	$0			当前记录								
 --------------------------------------------------------------------------
 	$1~$n		当前记录的第n个字段						
 --------------------------------------------------------------------------
 	FS			输入字段分隔符,默认为空格				awk 'BEGIN{FS=":"}{print $1","$2","$3}' hello.txt
 --------------------------------------------------------------------------
 	RS			输入记录分隔符,默认为换行符			awk 'BEGIN{FS=":";RS="\t"}{print $1,$2,$3}' hello.txt
 --------------------------------------------------------------------------
 	NF			当前记录中的字段个数,就是有多少列		awk -F ":" 'NF==8{print $0}' hello.txt
 --------------------------------------------------------------------------
 	NR			已经读出的记录数,就是行号,从1开始		ifconfig ens33| awk -F [" "]+ 'NR==2{print $3}'
 --------------------------------------------------------------------------
 	OFS			输出字段分隔符,默认为空格				awk 'BEGIN{FS=":";OFS="#"}{print $1,$2,$3}' hello.txt
 --------------------------------------------------------------------------
 	ORS			输出记录的分隔符,默认为换行符
 --------------------------------------------------------------------------
eof

:<<eof
										5.awk常用函数
 ----------------------------------------------------------------------------------------
 	gsub()
 	含义:  												
	示例: awk 'BEGIN{info="this is a test2010test!";gsub(/[0-9]+/,"!",info);print info}'
 ----------------------------------------------------------------------------------------
 	sub
 	含义: 		
	示例: awk 'BEGIN{info="this is a test2010test!";sub(/[0-9]+/,"!",info);print info}'
 ----------------------------------------------------------------------------------------
 	index(str1,str2)		
 	含义: 返回str2在str1中的位置		 
	示例: awk 'BEGIN{info="test string!";print index(info,"str")}'
 ----------------------------------------------------------------------------------------
 	length(str}				
 	含义: 返回参数指定字符串的长度
	示例: awk 'BEGIN{info="tHis#is#A#teSt";print length(info)}'
 ----------------------------------------------------------------------------------------
 	blength(str)
 	含义: 
	示例: 
 ----------------------------------------------------------------------------------------
 	substr(str, M, N)		
 	含义: 从字符串str第M个字符开始截取N个字符串(截取)	
	示例: awk 'BEGIN{info="teststring!";print substr(info,4,5);}'
 ----------------------------------------------------------------------------------------
 	match(str,Ere)			
 	含义: 在字符串str中查找匹配Ere代表的字符串(查找)	 
	示例: awk 'BEGIN{info="test string!";print match(info,/[0-9]+/)}'
 ----------------------------------------------------------------------------------------
 	split(Str, A, [Ere])	
 	含义: 把str分割为数组元素存储在A中,Ere指定分隔符(分割)
	示例: awk 'BEGIN{info="this#is#a#test";split(info,tA,"#");print length(tA);for(k in tA){print k,tA[k];}}'
 ----------------------------------------------------------------------------------------
 	tolower(str)			
 	含义: 把指定字符串的字母转为小写
	示例: awk 'BEGIN{info="tHis#is#A#teSt";print tolower(info)}'
 ----------------------------------------------------------------------------------------
 	toupper(str)			
 	含义: 把指定字符串的字母转为大写
	示例: awk 'BEGIN{info="tHis#is#A#teSt";print toupper(info)}'
 ----------------------------------------------------------------------------------------
 	sprintf(Format, Expr,Expr,...)
 ----------------------------------------------------------------------------------------
eof









































